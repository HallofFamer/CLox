class Nil { 

}

class Bool { 

}

trait TComparable { 
    compareTo(other){ 
        error("Not implemented, subclass responsibility.");
    }
    
    equals(value) { 
        if(this == value) return true;
        return this.compareTo(other) == 0;
    }
}

class Number with TComparable { 
    step(to, by, closure){ 
        var from = this;
        if(by == 0) error("Step size cannot be 0");
        else{ 
            if(by > 0){ 
                while(from < to){
                    closure(from);
                    from = from + by;
                }
            }
            else{
                while(from > to){ 
                    closure(from);
                    from = from - by;
                }
            }
        }
    }
}

class Int < Number {
    downTo(to, closure){
        var from = this;
        while(from > to){
            closure(from);
            from = from - 1;
        }
    }

    timesRepeat(closure){ 
        var i = 0;
        while(i < this){
            closure(i);
            i = i + 1;
        }
    }

    upTo(to, closure){ 
        var from = this;
        while(from < to){ 
            closure(from);
            from = from + 1;
        }
    }
}
namespace test.features;

class InterceptObject {   
    init() { 
        this.definedProperty = "property";
    } 

    __beforeGet__(name) { 
        println("Before getting value of property ${name}.");
    }

    __afterGet__(name, value) { 
        println("After getting value of property ${name}: ${value}.");
        return "new ${value}";
    }

    __undefinedGet__(name) { 
        println("Accessing undefined property: ${name}.");
    }

    __beforeSet__(name, value) { 
        println("Before Set property ${name} to value ${value}");
        return "${value} new";
    }

    __afterSet__(name) { 
        println("After setting value of property ${name}");
    }

    __undefinedInvoke__(name, args){ 
        println("Invoking undefined method: ${name} with ${args.length} arguments: ${args.toString()}.");
    }
}

println("Testing interceptor methods for property get: ");
val intercept = InterceptObject();
println(intercept.definedProperty);
intercept.undefinedProperty;
println("");

println("Testing interceptor methods for property set: ");
intercept.definedProperty = "property 2";
println(intercept.definedProperty);
println("");

println("Testing interceptor methods for method invocation: ");
intercept.undefinedMethod(0, 2, 4);
namespace test.features;

println("Testing getting properties: ");
val array = [1, 2, 3, 4, 5];
println("Length of array: ${array.length}");

val dict = ["US": "United States", "EU": "Europe"];
println("Length of dictionary: ${dict.length}");

val string = "Hello World";
println("Length of string: ${string.length}");

val range = 1..5;
println("Range from ${range.from} to ${range.to}");

try { 
    val x = 1 / 0;
}
catch (ArithmeticException e) { 
    println("Caught exception with message: ${e.message}");
}

println("");


println("Testing setting properties: ");
array.name = "Number Array";
array.capacity = 8;
println("Array Name: ${array.name}, Capacity: ${array.capacity}");

dict.name = "Country Dictionary";
dict.loadFactor = 0.5;
dict.capacity = dict.length / dict.loadFactor;
if (dict.capacity < 8) dict.capacity = 8;
println("Dictionary Name: ${dict.name}, Load Factor: ${dict.loadFactor}, Capacity: ${dict.capacity}");

string.isASCII = true;
println("String is ASCII: ${string.isASCII}");

println("Testing handling native exception: ");
try { 
    val range = 3.."abc";
}
catch(IllegalArgumentException e){ 
    e.file = "property.lox";
    e.line = 38;
    println("Caught ${e.getClassName()} with message: ${e.message} \nat line ${e.line} in file ${e.file}");
}
println("");


println("Testing inheritance: ");

class Byte < Int { 
    __init__(value) { 
        super.__init__(value);
        if (value < -128 or value > 127) { 
            throw IllegalArgumentException("Byte has range from -128 to 127.");
        }
    }
}

val byte = Byte(10);
val byte2 = Byte(6);
println("Creating byte: ${byte} and ${byte2}");
println("Class for byte: ${byte.getClassName()}");
println("Object ID for byte: ${byte.objectID()}");
println("Sum of two bytes: ${byte + byte2}");
println("Sum of byte and int: ${byte + 5}");
println("factorial of byte: ${byte.factorial()}");
println("Compute gcd for two bytes: ${byte.gcd(byte2)}");
println("Convert byte to binary: ${byte.toBinary()}");
println("Trying to create an invalid Byte object: ");

try { 
    val byte3 = Byte(256);
}
catch(IllegalArgumentException e) { 
    println("Caught exception with message: ${e.message}");
}
println("");
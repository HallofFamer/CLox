namespace test.features;

/*
fun fibonacci(){ 
    var last = 0;
    var current = yield 1;
    var next = 1;

    while(true) { 
        current = last + current;
        last = current - last;
        next = yield current;
    }
}

val generator = fibonacci();
println("Testing Infinite Fibonacci number generator: ${generator}");
var i = 1;
while(i <= 10) {
    println("Fibonacci number at index ${i}: ${generator.next().value}");
    i = i + 1;
}
println("");
*/

class MultiGenerator { 
    
    __init__(){ 
        this.totalYields = 0;
    }

    inner(){ 
        println("Inner Generator starts...");
        yield 2;
        yield 3;
        println("Inner Generator ends...");
    }

    middle(){ 
        println("Middle Generator starts...");
        yield 1;
        yield from this.inner();
        yield 4;
        println("Middle Generator ends...");
    }

    outer(){ 
        println("Outer Generator start...");
        yield 0;
        yield from this.middle();
        yield 5;
        println("Outer Generator ends..."); 
    }

    __onYield__(name, result){ 
        this.totalYields = this.totalYields + 1;
        return result;
    }
}

println("Testing nested generators: ");
val multi = MultiGenerator();
val generator2 = multi.outer();
while(!generator2.nextFinished()) { 
    println("Generator yield value: ${generator2.value}");
}
println("Total number of yields: ${multi.totalYields}");
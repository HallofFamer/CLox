trait TVehicle { 
    isMoving(){ 
        return this.speed > 0;
    }

    drive(speed){ 
        this.speed = speed;
    }

    accelerate(dSpeed){ 
        this.speed = this.speed + dSpeed;
    } 

    stop(){ 
        this.speed = 0;
    }
}

println("Trait: " + TVehicle.toString());
print("TVehicle is trait: ");
println(TVehicle.isTrait());
print("TVehicle is class: ");
println(TVehicle.isClass());
print("TVehicle has method 'drive': ");
println(TVehicle.hasMethod("drive"));
print("TVehicle has method 'carry': ");
println(TVehicle.hasMethod("carry"));
print("Class of TVehicle: ");
println(TVehicle.getClass());
print("Class of Trait: ");
println(TVehicle.getClass().getClass());
print("Class of Trait class: ");
println(TVehicle.getClass().getClass().getClass());
print("Superclass of Trait: ");
println(TVehicle.getClass().superclass());
println("");

trait TTruck < TVehicle { 
    carry(dLoad) { 
        if(this.isMoving()) this.stop();
        this.load = this.load + dLoad;
    }
}

println("Trait: " + TTruck.toString());
print("TTruck has method 'drive': ");
println(TTruck.hasMethod("drive"));
print("TTruck has method 'carry': ");
println(TTruck.hasMethod("carry"));
println("");

class Vehicle < TVehicle { 
    init(color, speed) { 
        this.color = color;
        this.speed = speed;
    }

    toString(){ 
        val message = this.color + " " + this.getClassName();
        if(this.isMoving()) return message + " is moving at " + this.speed.toString() + " mph";
        else return message + " is stationary";
    }
}

val vehicle = Vehicle("blue", 30);
println(vehicle.toString());